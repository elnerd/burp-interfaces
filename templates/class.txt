# Autogenerated {{ now() }}
try:
    from typing import List, Union, Optional
except ImportError:
    pass
{% for imp in package.imports|map(attribute="python_module")|unique -%}
try:
    import {{ imp }}
except ImportError:
    pass
{% endfor %}

{% for klassfile in package.klasses -%}
{% set klass = klassfile.klass -%}
{% if klass is not none -%}
class {{ klass.name }}({{ klass.inheritance|map("resolve_type")|join(", ") }}):
    """
    {{ klass.documentation.to_string()|indent(width=4) }}
    """
    {% for constant in klass.constants -%}
    {{ constant.name }} = {{ constant.value }}  # type: {{ constant.type|python_resolve }}
    {% endfor %}
    {% for method in klass.methods -%}
    def {{ method.name }}({{ method.parameter_names|join(", ") }}):
        # type: ({{ method.parameters|map(attribute="type")|map("python_resolve")|join(", ")  }}) -> {{ method.return_type|python_resolve(klassfile=klassfile) }}
        {% if method.documentation is defined %}{% if method.documentation is not none -%}
        """
        {{ method.documentation.to_string()|wordwrap(width=60)|indent(width=8) }}
        {% for param in method.documentation.parameters -%}
        :param:    {{ param.name }}    {{ param.value|wordwrap(width=50)|indent(width=8) }}
        {% endfor -%}
        {% if method.documentation.return_type is not none %}
        :return: {{ method.documentation.return_type.value|wordwrap(width=60)|indent(width=8) }}
        {% endif -%}
        """
        {% endif %}{% endif -%}
        pass

    {% endfor %}
{% endif -%}
{% endfor -%}
